to create local repo , use git init
by default when we create fole it will be a part of working directory,
we need to let git know that this is a part of git and it goes to staging area

git status - shows file on branch or untracked files

to delete .git, use rm .git or go to folder and delete .git folder

to set bracnh to main instead of master , 
use git init -b main (here -b stands for branch)

if we want to add a file to staging area, we need to
use git add <filename>

to see all the commits on the branch, we need to use git log

We need to commit, we need to use git commit -m "<add msg here>
once this is done, the file will be tracked by git for changes

git creates checksum for every commit, it is created using 40 characters
out of it we only focus on 1st 7 characters
e.g [main (root-commit) 5936ab3] My first commit.

after editing a file in local, if we do git status it will show changes not staged for commit
becase we have not added files for staging yet, we need to go git add, then git commit

git log will show the author and date of commits

if we want to skip staging we can add -a to commit
eg. git commit -a -m "<messager her>"

git diff - finding differences in what we have worked and what is already there in commits

if we add the file to staging area and then do git diff, it will not show anything
git diff --staged - to see diff in staging area
modified

to add all files to staging area, we use git add .

to delete file from git staging area, we use git rm --cached <filename>

then create repo from github website
copy the https link or setup ssh

git remote - as shown on steps
git push -u origin main // u is upstream, main is the branch

to check how many versions/tags of this software are there 
git tag

there are 2 types of tagging -Annotated tagging - Lightweight Tagging
for annotated - git tag -a v1.0 -m "first msg" here -a is for annotated

to see info of tag - git tag v1.0 
this tag will not be visible on github directly
we need to push tag - git push origin v1.0

to create branches we can use git checkout or git switch
eg git checkout -b <branchname> - this creates branch names feature1
eg git switch -c <branchname>

to see number of branches , git branch and the one with green and star will be the one active
git branch -all - this shows all local and remote branches

to switch branches, git switch <branch name>
the code commited on one brnach will not be visible on other branch

to delete branch - git branch -d <branchname>

to push branch to github - git push origin <branchname>

Merging two branches
to use merge we have to be in main branch

we need to do git pull to always keep latest code on our machien before Merging

git push origin main to push to github

adding git rebase here
here 
git rebase <branch name>

merge conflict can occure when merging files, it will show error when git merge <branch> is done,
we need to solve that conflict and then git add . , git commit -m "msg", git merge <branch>

when we want to pull changes from remote repo to local repo we need to use pull
git pull origin main

to time travel, we need to get git log and get all commits 
then git checkout <commit id >